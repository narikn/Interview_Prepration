void Main()
{
	// kiran
	// Write code to test your extensions here. Press F5 to compile and run.
}

public static class MyExtensions
{
	// Write custom extension methods here. They will be available to all queries.
	
	public static T P<T>(this T value)
	{
		Console.WriteLine(value.ToString());
		return value;
	}
}

public static class ArrayExtensions
{



	public static void Swap(this int[] a, int left, int right)
	{
		int x = a[left];
		a[left] = a[right];
		a[right] = x;
	}

	public static void PrintInLine(this object a)
	{
		Console.Write(a.ToString());
	}

	public static void PrintNewLine(this object a)
	{
		Console.WriteLine(a.ToString());
	}

	public static void PrintArray(this int[] _array)
	{
		if (_array != null)
		{
			string str = string.Empty;
			for (int i = 0; i < _array.Length; i++)
			{
				str = str + "  " + _array[i].ToString();
			}
			str.Dump();
		}
	}

	public static void PrintArrayWithIteration(this int[] _array, int? _iterator_1, int? _iterator_2, string _iterator_1_Name = null, string _iterator_2_Name = null)
	{
		if (_array != null)
		{
			string str = string.Empty;
			for (int i = 0; i < _array.Length; i++)
			{
				str = str + "  " + _array[i].ToString();
			}


			if (_iterator_1 == null && _iterator_2 == null)
			{
				var st = $" --> {str}";
				st.Dump();
			}
			if (_iterator_1 == null && _iterator_2 != null)
			{
				var st = $"{_iterator_2_Name}--> {_iterator_2} --> {str}";
				st.Dump();
			}

			if (_iterator_1 != null && _iterator_2 == null)
			{
				var st = $"{_iterator_1_Name}--> {_iterator_1} --> {str}";
				st.Dump();
			}

			if (_iterator_1 != null && _iterator_2 != null)
			{
				var st = $"{_iterator_1_Name}--> {_iterator_1} - and -  {_iterator_2_Name}--> {_iterator_2} --> {str}";
				st.Dump();
			}
		}
	}

	public static void PrintArrayAtIndex(this int[] _array, int? indexAt = null, int? loopIndex = null)
	{
		if (indexAt != null && loopIndex != null)
		{
			if (indexAt == loopIndex)
			{
				if (_array != null)
				{
					string str = string.Empty;
					for (int i = 0; i < _array.Length; i++)
					{
						str = str + "  " + _array[i].ToString();
					}
					str.Dump();
				}
			}
		}

	}

	public static void PrintUptoN(this int[] _array, int _n)
	{
		if (_array != null)
		{
			string str = string.Empty;
			for (int i = 0; i < _array.Length && i <= _n - 1; i++)
			{
				str = str + "  " + _array[i].ToString();
			}
			str.Dump();
		}
	}

	public static void PrintListOfList(this List<List<int>> ls)
	{
		if (ls != null)
		{
			foreach (var element in ls)
			{
				if (element != null)
				{
					PrintArray(element.ToArray());
				}
			}
		}
	}

	public static void PrintStr(string[] toPrint)
	{
		Console.WriteLine(string.Join("", toPrint));
	}

	public static void PrintListOfList(this IList<IList<int>> ls)
	{
		if (ls != null)
		{
			foreach (var element in ls)
			{
				if (element != null)
				{
					PrintArray(element.ToArray());
				}
			}
		}
	}

	public static void Swap(this int[] a, int i, int j, bool displaySwap = false)
	{
		string s1 = $"Swaped elements {a[i]},{a[j]}";
		int t = a[i];
		a[i] = a[j];
		a[j] = t;
		string s2 = $" to {a[i]},{a[j]}";
		if (displaySwap == true)
		{
			(s1 + s2).Dump();
		}
	}

	public static Tuple<string, TSource> GetNameAndValue<TSource>(Expression<Func<TSource>> sourceExpression)
	{
		Tuple<String, TSource> result = null;
		Type type = typeof(TSource);
		Func<MemberExpression, Tuple<String, TSource>> process = delegate (MemberExpression memberExpression)
																	{
																		ConstantExpression constantExpression = (ConstantExpression)memberExpression.Expression;
																		var name = memberExpression.Member.Name;
																		var value = ((FieldInfo)memberExpression.Member).GetValue(constantExpression.Value);
																		return new Tuple<string, TSource>(name, (TSource)value);
																	};

		Expression exception = sourceExpression.Body;
		if (exception is MemberExpression)
		{
			result = process((MemberExpression)sourceExpression.Body);
		}
		else if (exception is UnaryExpression)
		{
			UnaryExpression unaryExpression = (UnaryExpression)sourceExpression.Body;
			result = process((MemberExpression)unaryExpression.Operand);
		}
		else
		{
			throw new Exception("Expression type unknown.");
		}

		return result;
	}
}

#region Advanced - How to multi-target

// The NETx symbol is active when a query runs under .NET x or later.

#if NET7
// Code that requires .NET 7 or later
#endif

#if NET6
// Code that requires .NET 6 or later
#endif

#if NET5
// Code that requires .NET 5 or later
#endif

#endregion