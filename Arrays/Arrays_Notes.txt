Finding point with out over flow
---------------------------------
     usual way is low+high/2  but this can cause overflow

	int high = 10, low = 1;
	int mid = low + (high - low) / 2;

	int mid2 = high - (high - low) / 2;
	mid.Dump();
	mid2.Dump();

-------------------------------

**Finding Duplicates**
------------------------


### 1. Print duplicates in a sorted array. O(n)
-------------------
1. **Initialization**: 
   - Initialize a variable, `lastDuplicate`, to keep track of the most recent duplicate identified. This ensures we don't print duplicates multiple times.

2. **Traversing**: 
   - Traverse through the array using a single loop with a counter, `i`.

3. **Identifying Duplicates**: 
   - If the current number (at position `i`) is the same as the next number (at position `i+1`) and this duplicate is different from `lastDuplicate`, then it's a new duplicate.
   - Print this duplicate and update `lastDuplicate`.

### 2. Print duplicates in an unsorted array. O(n2)
------------------
1. **Traversing with Two Loops**: 
   - Use an outer loop with counter `i` to pick numbers from the array.
   - For each picked number, use an inner loop with counter `j` (starting from `i+1`) to traverse the rest of the array.

2. **Identifying Duplicates**: 
   - Inside the inner loop, if the number at position `i` (from the outer loop) matches the number at position `j` (from the inner loop), it's a duplicate. Print it.

### 3. Display duplicated elements and their counts in a sorted array.O(n)
---------------------
1. **Initialization**: 
   - Initialize `lastDuplicate` to track the most recent duplicate.
   - Initialize a counter `count` to 1.

2. **Traversing**: 
   - Traverse the array using a loop counter, `i`.

3. **Counting Duplicates**:
   - If the current number is the same as the next, increment `count`.
   - If the current number differs from the next or it's the array's end, and `count` is more than 1, print the number and its count. Then, reset `count` to 1.

### 4. Display duplicated elements and their counts in an unsorted array. O(n2)
--------------------
1. **Traversing with Two Loops**: 
   - Use an outer loop (`i`) to pick numbers.
   - For each number, traverse the rest of the array using an inner loop (`j`).

2. **Identifying & Counting Duplicates**: 
   - Initialize a counter `count` to 1.
   - Inside the inner loop, if numbers at positions `i` and `j` match, increment `count`.
   - After the inner loop finishes for a number, if `count` is more than 1, print the number and its count.

3. **Avoiding Recounts**:
   - To avoid counting a number's duplicates multiple times, mark counted numbers.
   - Either modify the original array with a sentinel value like `-1` or use an auxiliary array to keep track of counted positions.

I hope this streamlined version is easier to remember and teach!