
static void Main(string[] args)
{
	TreeNode root = new TreeNode(1);
	root.Left = new TreeNode(2);
	root.Right = new TreeNode(3);
	root.Left.Left = new TreeNode(4);
	root.Left.Right = new TreeNode(5);
	root.Right.Left = new TreeNode(6);
	root.Right.Right = new TreeNode(7);

	Tree tree = new Tree(root);

	Dictionary<int, List<TreeNode>> result = tree.LevelOrderTraversal();

	foreach (var kvp in result)
	{

		foreach (var node in kvp.Value)
		{
			Console.Write(node.Value + " ");
		}

	}
}

public class Tree
{
	public TreeNode Root { get; set; }

	public Tree(TreeNode root)
	{
		Root = root;
	}

	public Dictionary<int, List<TreeNode>> LevelOrderTraversal()
	{
		Dictionary<int, List<TreeNode>> result = new Dictionary<int, List<TreeNode>>();
		LevelOrder(Root, 0, result);
		return result;
	}

	private void LevelOrder(TreeNode node, int level, Dictionary<int, List<TreeNode>> map)
	{
		if (node == null)
		{
			return;
		}

		if (map.ContainsKey(level)==false)
		{
		
			map.Add(level, new List<TreeNode>());
		}

		map[level].Add(node);


		LevelOrder(node.Left, level + 1, map);
		LevelOrder(node.Right, level + 1, map);
	}
}



public class TreeNode
{
	public int Value { get; set; }
	public TreeNode Left { get; set; }
	public TreeNode Right { get; set; }

	public TreeNode(int value)
	{
		Value = value;
		Left = null;
		Right = null;
	}
}

