Certainly! Here are some observations about the behavior of the XOR operation with respect to certain patterns and properties:

1. **Any Number XOR Itself**
   - Any number XORed with itself equals zero.
   - `n XOR n = 0`

2. **Any Number XOR Zero**
   - Any number XORed with zero equals the number itself.
   - `n XOR 0 = n`

3. **Flipping Specific Bit**
   - XORing a number with a bitmask flips the bits that are set in the bitmask.
   - For example, `n XOR 00010000` flips the fifth bit of `n`.

4. **Even and Odd Numbers**
   - Even number XOR 1 = Next higher odd number.
   - Odd number XOR 1 = Previous even number.

5. **Identity Property**
   - XOR operation is its own inverse. XORing the result of an XOR with one of the operands returns the other operand.
   - `(n XOR m) XOR m = n`

6. **Commutative Property**
   - XOR operation is commutative: the order of operands does not affect the result.
   - `n XOR m = m XOR n`

7. **Associative Property**
   - XOR operation is associative: operands can be grouped in any order.
   - `(n XOR m) XOR o = n XOR (m XOR o)`

8. **Bitwise Cancellation**
   - XORing a number with a series of 1's performs a bitwise NOT operation.
   - `n XOR 1111...1111 = ~n`

9. **Creating Masks**
   - XOR can be used to create masks to toggle specific bits within a number.
   - For example, XORing with `00001111` can be used to toggle the lower 4 bits of a number.

10. **Parity Checks**
    - The XOR operation is often used to check the parity of a set of bits because it's true only when an odd number of bits are set.

11. **Checksums and Error Detection**
    - In data transmission, XOR can be used to detect errors by XORing all bytes received; if the result is not zero, there was an error.

These properties of the XOR operation are widely used in fields like cryptography, error detection and correction algorithms, and more, due to its invertible nature and its ability to mix bits in a non-destructive manner.

Bitwise Left shit
---------------
x << 1   => x*2 Power 1
x<< 2 => x* 2 Power 2

(a) Set the the Kth bit X to 1 =>  X| (1<<k)
lets say we have 1 in binary has 001
001<<1 => 010 => 1 moved 1 position left

001<<2=> 100 => 1 moved 2 positions left

(b) Clear the the Kth bit X to 1 =>  X & ~(1<<k)

(c) Flip the Kth bit of X =>  X ^ (1<<k)

** how to create a mask of 1s' for 6 bits => 111 111 ( create all 6 1's) 
to do this 
 Step 1)  x= 1<< 6 
 Step 2) masl=x-1
 




Bitwise right shit
---------------
x << 1   => x/2 Power 1
x<< 2 => x / 2 Power 2


Odd or even
-------------
If a binary number last bit is one then it is a odd number.




